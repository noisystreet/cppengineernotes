数据结构与算法
============================

线性表
------------------------------------------------

数组
````````````````````````````````````````````````

数组是相同数据类型的元素按一定顺序排列的集合，就是把有限个类型相同的变量用一个名字命名，然后用编号区分他们的变量的集合，这个名字称为数组名，编号称为下标。组成数组的各个变量称为数组的分量，也称为数组的元素，有时也称为下标变量。

链表
````````````````````````````````````````````````

链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。
使用链表结构不需要预先知道数据大小，可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。
链表作为一种基础的数据结构，可以用来生成其它类型的数据结构。链表允许插入和移除表上任意位置上的节点。链表有很多种不同的类型：单向链表，双向链表以及循环链表。

主要操作：
+ 新建链表
+ 插入结点（前，后）
+ 删除结点
+ 统计元素个数
+ 清空链表

栈
````````````````````````````````````````````````

特点：后进先出
操作：入栈，出栈。取栈顶元素
应用：表达式求值

队列
````````````````````````````````````````````````

特点：先进先出

树
------------------------------------------------

二叉树
````````````````````````````````````````````````

+ 特点：每个节点至多有两个子节点
+ 一些常用术语：
+ 结点：包含一个数据元素及若干指向子树的分支；
+ 孩子结点：结点的子树的根称为该结点的孩子；
+ 双亲结点：B 结点是A 结点的孩子，则A结点是B 结点的双亲；
+ 兄弟结点：同一双亲的孩子结点；
+ 结点层：根结点的层定义为1；根的孩子为第二层结点，依此类推；
+ 树的深度：树中最大的结点层数
+ 结点的度：结点的子树的个数
+ 树的度： 树中最大的结点度。
+ 叶子结点：也叫终端结点，是度为 0 的结点；
+ 分枝结点：度不为0的结点；

+ 满二叉树：深度为k，且有2^k-1个节点称之为满二叉树。
+ 完全二叉树：深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。
+ 平衡二叉树：又称AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
+ 遍历方式：前序遍历，中序遍历，后序遍历，层次遍历
+ 常用存储方式：链式存储

KD树
````````````````````````````````````````````````
空

图
------------------------------------------------

+ 基本概念
+ 图的定义，分类
+ 有向/无向图
+ 节点的度
+ 环
+ 邻接表/邻接矩阵
+ 图的遍历（深度优先，广度优先）
+ 最小生成树
+ 最短路径算法
+ 拓扑排序
+ 拓扑排序定义：对图G，找到一个线性序列，使得对于任意边<u,v>属于G，在线性序列中，u、v有序。
+ DAG图是图可以拓扑排序的充要条件，不断将入度为0的点加入线性表，并从图中删除，重复以上过程直到完成即可。可以采用一个队列来实现。

Hash表
------------------------------------------------

排序算法
------------------------------------------------

经典排序方法
````````````````````````````````````````````````
+ 冒泡排序
+ 插入排序
+ 选择排序

+ 快速排序
+ 希尔排序
+ 归并排序
+ 堆排序
+ TopK算法

字符串匹配
------------------------------------------------

+ KMP算法
+ Boyer-Moore算法

经典算法
------------------------------------------------

+ 贪婪算法
+ 最近公共祖先（Lowest Common Ancestor）算法
+ buddy内存分配算法
+ 模拟退火算法
+ 遗传算法
+ 多级K路图算法